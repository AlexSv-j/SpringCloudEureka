server.port=8761
spring.application.name=eureka-server

#fetch property from configServer
config.path=http://localhost:8072/
spring.config.import=optional:configserver:${config.path}

#eureka.instance.hostname=hostname
##to doesn't fetch details of microservices and save in the service cache
#eureka.client.fetch-registry=false
##to doesn't register itself in the eureka
#eureka.client.register-with-eureka=false
#
##path where other microservices could fetch some data(register and discovery)
#eureka.client.service-url.defaultZone=http://${eureka.instance.hostname}:%{server.port}/eureka/

#Eureka doesn't work from git
management.endpoints.web.exposure.include=*

##to add endpoint to check liveness and readiness state
#management.health.livenessstate.enabled=true
#management.health.readinessstate.enabled=true
#management.endpoint.health.probes.enabled=true

eureka.server.expected-client-renewal-interval-seconds=30
eureka.instance.lease-expiration-duration-in-seconds=90
eureka.server.eviction-interval-timer-in-ms=60000
eureka.server.renewal-percent-threshold=0.85
eureka.server.renewal-threshold-update-interval-ms=900000
eureka.server.enable-self-preservation=true

management.metrics.tags.application=${spring.application.name}

logging.level.com.svichkar.eureka.eurekaserver=debug
logging.pattern.level=%5p [${spring.application.name},%X{trace_id},%X{span_id}]
